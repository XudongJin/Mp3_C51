C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SDCARD
OBJECT MODULE PLACED IN .\Objects\SDCard.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SDCard.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\SD
                    -Card.lst) TABS(2) OBJECT(.\Objects\SDCard.obj)

line level    source

   1          #include "AT89C51RC2.h"
   2          #include "PORT.H"
   3          #include "main.h"
   4          #include "SDCard.h"
   5          #include "print_bytes.h"
   6          #include "SPI.h"
   7          #include <stdio.h>
   8          
   9          static uint8_t  idata SD_Card_Type;
  10          
  11          /***********************************************************************
  12          DESC:    Sends Commands to SD card using the SPI peripheral
  13                   cmnd=Command number to be sent
  14                   argum=32bit argument for a command
  15          RETURNS: error flag
  16          CAUTION: Must be followed by a read to capture SD card response
  17                   nCS0 must be set/cleared outside of this routine 
  18          ************************************************************************/
  19          uint8_t SEND_COMMAND(uint8_t cmnd, uint32_t argum)
  20          {
  21   1       uint8_t SPI_send, return_val, SPI_return, error_flag;
  22   1      
  23   1       return_val=no_errors;
  24   1       if(cmnd<64)
  25   1       {
  26   2         SPI_send=cmnd | 0x40;
  27   2         error_flag=SPI_Transfer(SPI_send,&SPI_return);
  28   2         if((error_flag)==no_errors)
  29   2         {
  30   3           SPI_send=argum>>24;   // MSB
  31   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  32   3         }
  33   2         else
  34   2         {
  35   3           return_val=SPI_error;
  36   3         }
  37   2         if((return_val==no_errors)&&(error_flag==no_errors))
  38   2         {
  39   3           argum=argum & 0x00ffffff;
  40   3           SPI_send=argum>>16;  // BYTE2
  41   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  42   3         }
  43   2         else
  44   2         {
  45   3           return_val=SPI_error;
  46   3         }
  47   2         if((return_val==no_errors)&&(error_flag==no_errors))
  48   2         {
  49   3           argum=argum & 0x0000ffff;
  50   3           SPI_send=argum>>8;   // BYTE1
  51   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  52   3         }
  53   2         else
  54   2         {
C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 2   

  55   3           return_val=SPI_error;
  56   3         }     
  57   2         if((return_val==no_errors)&&(error_flag==no_errors))
  58   2         {
  59   3           SPI_send=argum & 0x000000ff;  // LSB
  60   3           error_flag=SPI_Transfer(SPI_send,&SPI_return);
  61   3         }
  62   2         else
  63   2         {
  64   3           return_val=SPI_error;
  65   3         }
  66   2         if((return_val==no_errors)&&(error_flag==no_errors))
  67   2         {         
  68   3            if (cmnd == 0)
  69   3            {
  70   4               SPI_send=0x95;  // CRC7 and end bit for CMD0
  71   4            }
  72   3            else if (cmnd == 8)
  73   3            {
  74   4               SPI_send=0x87;   // CRC7 and end bit for CMD8
  75   4            }
  76   3            else
  77   3            {
  78   4               SPI_send=0x01;  // end bit only for other commands
  79   4            }
  80   3            error_flag=SPI_Transfer(SPI_send,&SPI_return);
  81   3          }
  82   2       }
  83   1       else
  84   1       {
  85   2         return_val=illegal_cmnd;
  86   2       }
  87   1       return return_val;  
  88   1      }
  89          /***********************************************************************
  90          DESC:    Read values from SPI port, 0xff sent for each byte read 
  91               num_bytes=number of bytes to read
  92          RETURNS: error flag
  93                   *valout=address of array of bytes read
  94          CAUTION: Used to capture SD card response
  95                   nCS0 must be set/cleared outside of this routine 
  96          ************************************************************************/
  97          uint8_t response(uint8_t num_bytes, uint8_t * valout)
  98          {
  99   1         uint8_t index,return_val,error_flag, SPI_return;
 100   1      
 101   1         return_val=no_errors;
 102   1         do
 103   1         {
 104   2            error_flag=SPI_Transfer(0xFF,&SPI_return);
 105   2            index++;
 106   2         }while(((SPI_return&0x80)==0x80)&&(index!=0)&&(error_flag==no_errors));
 107   1         if(error_flag!=no_errors)
 108   1         {
 109   2            return_val=SPI_error;
 110   2         }
 111   1         else if(index==0)
 112   1         {
 113   2            return_val=timeout_error;
 114   2         }
 115   1         else
 116   1         {
C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 3   

 117   2           *valout=SPI_return;
 118   2           if((SPI_return==0x00)||(SPI_return==0x01))
 119   2           {
 120   3             if(num_bytes>1)
 121   3             {
 122   4               for(index=1;index<num_bytes;index++)
 123   4               {
 124   5                  error_flag=SPI_Transfer(0xFF,&SPI_return);
 125   5                  *(valout+index)=SPI_return;
 126   5               }
 127   4             }
 128   3           }
 129   2           else
 130   2           {
 131   3              return_val=response_error;
 132   3           }
 133   2         }
 134   1         error_flag=SPI_Transfer(0xFF,&SPI_return);  // send 8 more clock cycles to complete read
 135   1         return return_val;
 136   1      }
 137          
 138          
 139          /**********************************************************************
 140          DESC:    Reads a specifed number of bytes from SD card,
 141                   0xff sent for each byte read 
 142          RETURNS: error flag
 143                   block of data stored in array_out[]
 144          CAUTION: Used to capture SD card response
 145                   nCS0 must be set/cleared outside of this routine 
 146          ************************************************************************/
 147          uint8_t read_block(uint16_t num_bytes, uint8_t * array_out)
 148          {
 149   1         uint8_t error_flag,return_val,SPI_return;
 150   1         uint16_t index;
 151   1         index=0;
 152   1         return_val=no_errors;
 153   1         do
 154   1         {
 155   2            error_flag=SPI_Transfer(0xFF,&SPI_return);
 156   2            index++;
 157   2         }while(((SPI_return&0x80)==0x80)&&(index!=0)&&(error_flag==no_errors));
 158   1         if(error_flag!=no_errors)
 159   1         {
 160   2            return_val=SPI_error;
 161   2         }
 162   1         else if(index==0)
 163   1         {
 164   2            return_val=timeout_error;
 165   2         }
 166   1         else
 167   1         {
 168   2           if (SPI_return==0x00)
 169   2           {
 170   3              index=0;
 171   3            do
 172   3              { 
 173   4                 error_flag=SPI_Transfer(0xFF,&SPI_return); 
 174   4                 index++;
 175   4              }while((SPI_return==0xFF)&&(index!=0)&&(error_flag==no_errors));          // wait for data token r
             -esponse  
 176   3              if(error_flag!=no_errors)
 177   3              {
C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 4   

 178   4                 return_val=SPI_error;
 179   4              }
 180   3              else if(index==0)
 181   3              {
 182   4                return_val=timeout_error;
 183   4              }
 184   3              else if(SPI_return==0xfe)
 185   3              {
 186   4                for(index=0;index<num_bytes;index++)
 187   4                {
 188   5                   error_flag=SPI_Transfer(0xFF,&SPI_return);
 189   5                   *(array_out + index)=SPI_return;
 190   5                }
 191   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 1 of CRC16 
 192   4                error_flag=SPI_Transfer(0xFF,&SPI_return); // discard byte 2 of CRC16
 193   4              }
 194   3            else
 195   3            {
 196   4              return_val=data_error;
 197   4            }
 198   3           }
 199   2           else
 200   2           {
 201   3              return_val=response_error;
 202   3           }
 203   2         }
 204   1       error_flag=SPI_Transfer(0xFF,&SPI_return);// send 8 more clock cycles to complete read
 205   1      return return_val;
 206   1      }
 207          
 208          
 209          /**********************************************************************
 210          DESC:    Sends the commands needed to initialize the SD card 
 211          RETURNS: error flag
 212          CAUTION:  
 213          ************************************************************************/
 214          uint8_t SD_card_init(void)
 215          {
 216   1         uint8_t i,error_status,error_flag,valsout[8],SPI_return;
 217   1         uint32_t argument;
 218   1         uint16_t timeout;
 219   1         error_status=no_errors;
 220   1         SD_Card_Type=unknown;
 221   1         nCS0=1;
 222   1         printf("SD Card Initialization ... \n\r");
 223   1         for(i=0;i<10;i++)
 224   1         {
 225   2             error_flag=SPI_Transfer(0xFF,&SPI_return);
 226   2         }
 227   1         GREENLED=0;
 228   1         printf("CMD0 sent ... ");   
 229   1         nCS0=0;  // CS card CS low
 230   1         error_flag=SEND_COMMAND(CMD0,0);
 231   1         if(error_flag==no_errors)
 232   1         {
 233   2           error_flag=response(1,valsout);
 234   2         nCS0=1;
 235   2           GREENLED=1;
 236   2           printf("Response = %2.2bX\n\r",valsout[0]);
 237   2         }
 238   1         else
 239   1         {
C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 5   

 240   2           nCS0=1;
 241   2         GREENLED=1;
 242   2         REDLED=0;  // indicates error has occured.
 243   2         }
 244   1         if(error_flag!=no_errors)
 245   1         {
 246   2           error_status=error_flag;
 247   2         }
 248   1         if(error_status==no_errors)
 249   1         {
 250   2           GREENLED=0;
 251   2           printf("CMD8 sent ... ");
 252   2           nCS0=0;
 253   2           error_flag=SEND_COMMAND(CMD8,0x000001AA);
 254   2         if(error_flag==no_errors)
 255   2           {
 256   3              error_flag=response(5,valsout);
 257   3          nCS0=1;
 258   3          GREENLED=1;
 259   3            printf("Response = ");
 260   3              for(i=0;i<5;i++)
 261   3          {   
 262   4                  printf("%2.2bX ",valsout[i]);
 263   4          }
 264   3              putchar(CR);
 265   3              putchar(LF);
 266   3          if(valsout[4]!=0xAA)
 267   3          {
 268   4             error_flag=response_error;
 269   4          }
 270   3           }
 271   2           else
 272   2           {
 273   3              nCS0=1;
 274   3              GREENLED=1;
 275   3            REDLED=0;  // indicates error has occured.
 276   3           }
 277   2         if(error_flag!=no_errors)
 278   2         {
 279   3              if(error_flag==illegal_cmnd)
 280   3              {
 281   4                 error_status=no_errors;
 282   4             SD_Card_Type=Standard_Capacity;
 283   4             printf("Version 1 SD Card detected.\n\r");
 284   4             printf("Standard Capacity Card detected.\n\r");
 285   4              }
 286   3          else
 287   3          {
 288   4             error_status=error_flag;
 289   4          }
 290   3         }
 291   2         else
 292   2         {
 293   3          SD_Card_Type=Ver2;
 294   3          printf("Version 2 SD Card detected.\n\r");
 295   3         }
 296   2         }
 297   1         if(error_status==no_errors)
 298   1         {
 299   2           GREENLED=0;
 300   2           printf("CMD58 sent ... ");
 301   2           nCS0=0;
C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 6   

 302   2           error_flag=SEND_COMMAND(CMD58,0);
 303   2         if(error_flag==no_errors)
 304   2           {
 305   3              error_flag=response(5,valsout);
 306   3          nCS0=1;
 307   3          GREENLED=1;
 308   3            printf("Response = ");
 309   3              for(i=0;i<5;i++)
 310   3          {   
 311   4               printf("%2.2bX ",valsout[i]);
 312   4          }
 313   3              putchar(CR);
 314   3              putchar(LF);
 315   3          if((valsout[2]&0xFC)!=0xFC)
 316   3          {
 317   4             error_flag=voltage_error;
 318   4          }
 319   3           }
 320   2           else
 321   2           {
 322   3              nCS0=1;
 323   3              GREENLED=1;
 324   3            REDLED=0;  // indicates error has occured.
 325   3           }
 326   2         if(error_flag!=no_errors)
 327   2         {    
 328   3            error_status=error_flag;
 329   3         }
 330   2         }
 331   1         if(error_status==no_errors)
 332   1         {
 333   2           if(SD_Card_Type==Ver2)
 334   2         {
 335   3            argument=0x40000000;
 336   3         }
 337   2         else
 338   2         {
 339   3            argument=0;
 340   3         }
 341   2         timeout=0;
 342   2           GREENLED=0;
 343   2           printf("ACMD41 sent ... ");
 344   2           nCS0=0;
 345   2         do
 346   2         {
 347   3            P3_5=0;
 348   3            error_flag=SEND_COMMAND(CMD55,0);
 349   3          if(error_flag==no_errors)  error_flag=response(1,valsout);
 350   3          P3_5=1;
 351   3            if((valsout[0]==0x01)||(valsout[0]==0x00))
 352   3             error_flag=SEND_COMMAND(ACMD41,argument);
 353   3            if(error_flag==no_errors) response(1,valsout);
 354   3          timeout++;
 355   3          if(timeout==0) error_flag=timeout_error;
 356   3           }while(((valsout[0]&0x01)==0x01)&&(error_flag==no_errors));
 357   2         if(error_flag==no_errors)
 358   2           {
 359   3          nCS0=1;
 360   3              GREENLED=1;
 361   3            printf("Response = %2.2bX\n\r",valsout[0]);
 362   3           }
 363   2           else
C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 7   

 364   2           {
 365   3              nCS0=1;
 366   3              GREENLED=1;
 367   3            REDLED=0;  // indicates error has occured.
 368   3           }
 369   2         if(error_flag!=no_errors)
 370   2         {    
 371   3            error_status=error_flag;
 372   3         }
 373   2         }
 374   1         if((error_status==no_errors)&&(SD_Card_Type==Ver2))
 375   1         {
 376   2           GREENLED=0;
 377   2           printf("CMD58 sent ... ");
 378   2           nCS0=0;
 379   2           error_flag=SEND_COMMAND(CMD58,0);
 380   2         if(error_flag==no_errors)
 381   2           {
 382   3              error_flag=response(5,valsout);
 383   3          nCS0=1;
 384   3              GREENLED=1;
 385   3            printf("Response = ");
 386   3              for(i=0;i<5;i++)
 387   3          {   
 388   4                 printf("%2.2bX ",valsout[i]);
 389   4          }
 390   3              putchar(CR);
 391   3              putchar(LF);
 392   3          if((valsout[1]&0x80)!=0x80)
 393   3          {
 394   4             error_flag=card_inactive;
 395   4          }
 396   3          else
 397   3          {
 398   4             if((valsout[1]&0xC0)==0xC0)
 399   4             {
 400   5                SD_Card_Type=High_Capacity;
 401   5                printf("High Capacity Card Detected\n\r");
 402   5             }
 403   4             else
 404   4             {
 405   5                SD_Card_Type=Standard_Capacity;
 406   5              printf("Standard Capacity Card Detected\n\r");
 407   5              GREENLED=0;
 408   5                    printf("CMD16 sent ... ");
 409   5                    nCS0=0;
 410   5                    error_flag=SEND_COMMAND(CMD16,512);
 411   5                  if(error_flag==no_errors)
 412   5                    {
 413   6                        error_flag=response(1,valsout);
 414   6                    nCS0=1;
 415   6                        GREENLED=1;
 416   6                      printf("Response = %2.2bX \n\r",valsout[0]);
 417   6                        printf("Block size set to 512 bytes\n\r");
 418   6                }
 419   5            }
 420   4           }
 421   3           }
 422   2           else
 423   2           {
 424   3              nCS0=1;
 425   3              GREENLED=1;
C51 COMPILER V9.54   SDCARD                                                                12/15/2015 17:47:24 PAGE 8   

 426   3            REDLED=0;  // indicates error has occured.
 427   3           }
 428   2         if(error_flag!=no_errors)
 429   2         {    
 430   3            error_status=error_flag;
 431   3          print_error(error_status);
 432   3         }
 433   2         }
 434   1       if(error_status!=no_errors)
 435   1       {    
 436   2        print_error(error_status);
 437   2       }
 438   1      return error_status;
 439   1      }
 440          
 441          /**********************************************************************
 442          DESC:    Returns the SD card type 
 443          RETURNS: SD_Card_Type
 444          CAUTION: SD card must be initialized first
 445          ************************************************************************/
 446          
 447          uint8_t Return_SD_Card_Type(void)
 448          {
 449   1         return SD_Card_Type;
 450   1      }
 451          
 452          /**********************************************************************
 453          DESC:    Prints an error text based on the error code  
 454          RETURNS: nothing
 455          CAUTION: Mainly used for debugging
 456          ***********************************************************************/
 457          
 458          
 459          void print_error(uint8_t error)
 460          {
 461   1         if(error==timeout_error) printf("Timeout Error");
 462   1         else if(error==illegal_cmnd) printf("Illegal Command\n\r");
 463   1         else if(error==response_error) printf("Response Error");
 464   1         else if(error==data_error) printf("Data Token Error");
 465   1         else if(error==voltage_error) printf("Incompatible Voltage");
 466   1         else if(error==card_inactive) printf("Card is Inactive");
 467   1         else if(error==SPI_error) printf("SPI or Timeout Error");
 468   1         else printf("Unknown Error");
 469   1      }
 470          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1545    ----
   CONSTANT SIZE    =    496    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      43
   IDATA SIZE       =      1    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
