C51 COMPILER V9.54   I2C                                                                   12/15/2015 17:47:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\I2C.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE I2C.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\I2C.l
                    -st) TABS(2) OBJECT(.\Objects\I2C.obj)

line level    source

   1          #include "main.h"
   2          #include "PORT.H"
   3          #include "I2C.h"
   4          #include <stdio.h>
   5          
   6          /********************************************************************
   7          
   8          Private Function Declarations
   9          
  10          *********************************************************************/
  11          #define I2C_FREQ (25000UL)
  12          #define I2C_RELOAD (65536-((OSC_FREQ)/(OSC_PER_INST*I2C_FREQ*2)))
  13          #define I2C_RELOAD_H (I2C_RELOAD/256)
  14          #define I2C_RELOAD_L (I2C_RELOAD%256)
  15          
  16          #define Continue (1)
  17          #define Stop (2)
  18          
  19          
  20          void I2C_clock_start(void);
  21          void I2C_clock_delay(uint8_t control);
  22          
  23          /***********************************************************************
  24          DESC:    Creates the signals required for transmitting bytes using
  25                   the I2C bus.
  26          RETURNS: Error Flag
  27          CAUTION: 
  28                    
  29          ************************************************************************/
  30          
  31          uint8_t I2C_Write(uint8_t device_addr,uint8_t num_bytes,uint8_t * send_array)
  32          {
  33   1        uint8_t send_val, return_val, num_bits, send_bit, sent_bit;
  34   1      
  35   1        SDA=1;
  36   1        SCL=1;
  37   1        return_val=no_errors;
  38   1        if((SCL==1) && (SDA==1))
  39   1        {
  40   2           I2C_clock_start();
  41   2           send_val=device_addr<<1;
  42   2         send_val&=0xFE;           // make sure lsb is 0 for write
  43   2         //  send START condition
  44   2         SDA=0;
  45   2         num_bytes++;
  46   2         do
  47   2         {
  48   3            num_bits=8;
  49   3              do
  50   3          {
  51   4             I2C_clock_delay(Continue);
  52   4             SCL=0;
  53   4             num_bits--;
  54   4                 send_bit=((send_val>>num_bits)&0x01);
C51 COMPILER V9.54   I2C                                                                   12/15/2015 17:47:23 PAGE 2   

  55   4             SDA=(bit)send_bit;
  56   4             I2C_clock_delay(Continue);
  57   4                 SCL=1;
  58   4             while(SCL!=1);
  59   4                 sent_bit=SDA;
  60   4             if(sent_bit!=send_bit) return_val=bus_busy_error;
  61   4               }while((num_bits>0)&&(return_val==no_errors));
  62   3           I2C_clock_delay(Continue);
  63   3           SCL=0;
  64   3               SDA=1;      // set SDA high so slave can send ACK
  65   3               num_bytes--;
  66   3           send_val=*(send_array);
  67   3           send_array++;
  68   3           I2C_clock_delay(Continue);
  69   3           SCL=1;
  70   3           while(SCL!=1);
  71   3           sent_bit=SDA;
  72   3           if(sent_bit!=0) return_val=NACK_error;
  73   3            }while((num_bytes>0)&&(return_val==no_errors));
  74   2            // send STOP condition
  75   2          I2C_clock_delay(Continue);
  76   2            SCL=0;
  77   2          SDA=0;
  78   2          I2C_clock_delay(Continue);
  79   2          SCL=1;
  80   2          while(SCL!=1);
  81   2          I2C_clock_delay(Stop);
  82   2          SDA=1;
  83   2        }
  84   1        else
  85   1        { 
  86   2           return_val=bus_busy_error;
  87   2        }
  88   1        return return_val;
  89   1      }
  90          
  91          /***********************************************************************
  92          DESC:    Creates the signals required for receiving bytes using
  93                   the I2C bus.
  94          RETURNS: Error Flag
  95          CAUTION: 
  96                    
  97          ************************************************************************/
  98          
  99          
 100          uint8_t I2C_Read(uint8_t device_addr,uint8_t num_bytes,uint8_t * rec_array)
 101          {
 102   1        uint8_t send_val, return_val, num_bits, send_bit, sent_bit,rcv_val;
 103   1      
 104   1        SDA=1;
 105   1        SCL=1;
 106   1        return_val=no_errors;
 107   1        if((SCL==1) && (SDA==1))
 108   1        {
 109   2           I2C_clock_start();
 110   2           send_val=device_addr<<1;
 111   2         send_val|=0x01;           // make sure lsb is 1 for read
 112   2         //  send START condition
 113   2         SDA=0;
 114   2         //  send device address+R
 115   2         num_bits=8;
 116   2           do
C51 COMPILER V9.54   I2C                                                                   12/15/2015 17:47:23 PAGE 3   

 117   2         {
 118   3          I2C_clock_delay(Continue);
 119   3            SCL=0;
 120   3          num_bits--;
 121   3              send_bit=((send_val>>num_bits)&0x01);
 122   3          SDA=(bit)send_bit;
 123   3          I2C_clock_delay(Continue);
 124   3              SCL=1;
 125   3          while(SCL!=1);
 126   3              sent_bit=SDA;
 127   3          if(sent_bit!=send_bit) return_val=bus_busy_error;
 128   3            }while((num_bits>0)&&(return_val==no_errors));
 129   2          I2C_clock_delay(Continue);
 130   2          SCL=0;
 131   2            SDA=1;      // set SDA high so slave can send ACK
 132   2          I2C_clock_delay(Continue);
 133   2          SCL=1;
 134   2          while(SCL!=1);
 135   2          sent_bit=SDA;
 136   2          if(sent_bit!=0) return_val=NACK_error;
 137   2            while((num_bytes>0)&&(return_val==no_errors))
 138   2          {
 139   3             num_bits=8;
 140   3             do
 141   3           {
 142   4             I2C_clock_delay(Continue);
 143   4             SCL=0;
 144   4             num_bits--;
 145   4             SDA=1;
 146   4             rcv_val=rcv_val<<1;  // shift value to prepare for next rcvd bit
 147   4             I2C_clock_delay(Continue);
 148   4             SCL=1;
 149   4             while(SCL!=1);
 150   4                 sent_bit=SDA;
 151   4             rcv_val|=sent_bit;
 152   4           }while(num_bits>0);
 153   3           *rec_array=rcv_val;
 154   3           rec_array++;
 155   3           if(num_bytes==1)
 156   3           {
 157   4              send_bit=1;   // NACK for last byte
 158   4           }
 159   3           else
 160   3           {
 161   4              send_bit=0;   // ACK if more bytes are to be received
 162   4           }
 163   3           I2C_clock_delay(Continue);
 164   3           SCL=0;
 165   3           SDA=send_bit;
 166   3           I2C_clock_delay(Continue);
 167   3           SCL=1;
 168   3           while(SCL!=1);
 169   3           num_bytes--;
 170   3          }
 171   2            // send STOP condition
 172   2          I2C_clock_delay(Continue);
 173   2            SCL=0;
 174   2          SDA=0;
 175   2          I2C_clock_delay(Continue);
 176   2          SCL=1;
 177   2          while(SCL!=1);
 178   2          I2C_clock_delay(Stop);
C51 COMPILER V9.54   I2C                                                                   12/15/2015 17:47:23 PAGE 4   

 179   2          SDA=1;
 180   2        }
 181   1        else
 182   1        { 
 183   2           return_val=bus_busy_error;
 184   2        }
 185   1        return return_val;
 186   1      }
 187          
 188          /***********************************************************************
 189          DESC:    Initializes and starts Timer0 for a hardware delay for 
 190                   creating a consistant I2C frequency
 191          RETURNS: nothing
 192          CAUTION: 
 193                    
 194          ************************************************************************/
 195          
 196          void I2C_clock_start(void)
 197          {
 198   1      // Configure Timer0 as a 16-bit timer (mode1)
 199   1         TMOD &=0xF0;
 200   1         TMOD |=0x01;
 201   1      
 202   1         ET0=0;  //interrupts not used
 203   1      
 204   1        
 205   1        
 206   1        
 207   1         TH0=I2C_RELOAD_H;
 208   1         TL0=I2C_RELOAD_L;
 209   1      
 210   1         TF0=0;   // Clear overflow
 211   1         TR0=1;   // Start Timer Running
 212   1      }
 213          
 214          
 215          /***********************************************************************
 216          DESC:    Waits for the overflow to be set and restarts Timer0 for a  
 217                   hardware delay for creating a consistant I2C frequency
 218               Timer is stopped if stop is sent.
 219          RETURNS: nothing
 220          CAUTION: 
 221                    
 222          ************************************************************************/
 223          
 224          void I2C_clock_delay(uint8_t control)
 225          {
 226   1         if(TR0==1)
 227   1         { 
 228   2           while(TF0==0);
 229   2         }
 230   1      
 231   1         TR0=0;
 232   1         if(control==Continue)
 233   1         {
 234   2            TH0=I2C_RELOAD_H;
 235   2            TL0=I2C_RELOAD_L;
 236   2      
 237   2            TF0=0;   // Clear overflow
 238   2            TR0=1;   // Start Timer Running
 239   2         }
 240   1      }
C51 COMPILER V9.54   I2C                                                                   12/15/2015 17:47:23 PAGE 5   

 241          
 242          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    532    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      21
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
